
AMIT Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000076c  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005e8  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e2  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003aa  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008f  00000000  00000000  000017fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000188d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  74:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_2>:
#include <util/delay.h>

volatile int16_t adcVal = 0;
volatile int8_t processed_receive = 0;
volatile int8_t processed_send = 0;
ISR(INT1_vect) {
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	PORTC ^= (1 << PC5);
  8a:	95 b3       	in	r25, 0x15	; 21
  8c:	80 e2       	ldi	r24, 0x20	; 32
  8e:	89 27       	eor	r24, r25
  90:	85 bb       	out	0x15, r24	; 21
}
  92:	9f 91       	pop	r25
  94:	8f 91       	pop	r24
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <start_INT1>:

void start_INT1() {
	DDRA = 0x00;
  a0:	1a ba       	out	0x1a, r1	; 26
	DDRA |= (1 << PA6) | (1 << PA7);
  a2:	8a b3       	in	r24, 0x1a	; 26
  a4:	80 6c       	ori	r24, 0xC0	; 192
  a6:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	87 bb       	out	0x17, r24	; 23
	DDRC |= (1 << PC0) | (1 << PC5);
  ac:	84 b3       	in	r24, 0x14	; 20
  ae:	81 62       	ori	r24, 0x21	; 33
  b0:	84 bb       	out	0x14, r24	; 20
	PORTD |= (1 << PD3);
  b2:	93 9a       	sbi	0x12, 3	; 18
	GICR |= (1 << INT1);
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC11);
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	85 bf       	out	0x35, r24	; 53
	sei();
  c0:	78 94       	sei
  c2:	08 95       	ret

000000c4 <start_ADC>:
}

void start_ADC() {
	ADCSRA |= (1 << ADEN);
  c4:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
  c6:	86 b1       	in	r24, 0x06	; 6
  c8:	87 60       	ori	r24, 0x07	; 7
  ca:	86 b9       	out	0x06, r24	; 6
	ADMUX  |=(1 << ADLAR);
  cc:	3d 9a       	sbi	0x07, 5	; 7
  ce:	08 95       	ret

000000d0 <convert>:
}
void convert() {
	ADCSRA |= (1 << ADSC);
  d0:	36 9a       	sbi	0x06, 6	; 6
	while (bit_is_set(ADCSRA, ADSC));
  d2:	36 99       	sbic	0x06, 6	; 6
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <convert+0x2>
	adcVal = (ADCL >> 6) | (ADCH << 2);
  d6:	24 b1       	in	r18, 0x04	; 4
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	22 95       	swap	r18
  dc:	26 95       	lsr	r18
  de:	26 95       	lsr	r18
  e0:	23 70       	andi	r18, 0x03	; 3
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	82 2b       	or	r24, r18
  ee:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <adcVal+0x1>
  f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <adcVal>
  f6:	08 95       	ret

000000f8 <start_UART>:
}

void start_UART() {
	uint16_t ubrr_val = 6;
	UBRRH = (uint8_t)(ubrr_val >> 8);
  f8:	10 bc       	out	0x20, r1	; 32
	
	UBRRL = (uint8_t)ubrr_val;
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << TXEN) | (1 << RXEN);
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	88 61       	ori	r24, 0x18	; 24
 102:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
 104:	80 b5       	in	r24, 0x20	; 32
 106:	86 60       	ori	r24, 0x06	; 6
 108:	80 bd       	out	0x20, r24	; 32
 10a:	08 95       	ret

0000010c <send>:
	adcVal_receive = UDR;

}
*/
void send() {
	while (bit_is_clear(UCSRA, UDRE));
 10c:	5d 9b       	sbis	0x0b, 5	; 11
 10e:	fe cf       	rjmp	.-4      	; 0x10c <send>
	 UDR = (int8_t)processed_send;
 110:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 114:	8c b9       	out	0x0c, r24	; 12
 116:	08 95       	ret

00000118 <receive>:
	
}

void receive() {
	while(bit_is_clear(UCSRA, RXC));
 118:	5f 9b       	sbis	0x0b, 7	; 11
 11a:	fe cf       	rjmp	.-4      	; 0x118 <receive>
	processed_receive =(int8_t)UDR;
 11c:	8c b1       	in	r24, 0x0c	; 12
 11e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <processed_receive>
 122:	08 95       	ret

00000124 <showOn7SEG>:
}

void showOn7SEG() 
{
	uint8_t first_digit = processed_receive % 10;
 124:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <processed_receive>
 128:	27 e6       	ldi	r18, 0x67	; 103
 12a:	92 02       	muls	r25, r18
 12c:	21 2d       	mov	r18, r1
 12e:	11 24       	eor	r1, r1
 130:	25 95       	asr	r18
 132:	25 95       	asr	r18
 134:	97 fd       	sbrc	r25, 7
 136:	23 95       	inc	r18
 138:	22 0f       	add	r18, r18
 13a:	82 2f       	mov	r24, r18
 13c:	88 0f       	add	r24, r24
 13e:	88 0f       	add	r24, r24
 140:	28 0f       	add	r18, r24
 142:	92 1b       	sub	r25, r18
 144:	29 2f       	mov	r18, r25
	uint8_t second_digit = (processed_receive - first_digit) / 10;
 146:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <processed_receive>
 14a:	08 2e       	mov	r0, r24
 14c:	00 0c       	add	r0, r0
 14e:	99 0b       	sbc	r25, r25
 150:	82 1b       	sub	r24, r18
 152:	91 09       	sbc	r25, r1
 154:	6a e0       	ldi	r22, 0x0A	; 10
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__divmodhi4>
	
	PORTA |= (1 << PA6);
 15c:	de 9a       	sbi	0x1b, 6	; 27
	PORTA &= ~(1 << PA7);
 15e:	df 98       	cbi	0x1b, 7	; 27
	PORTB = first_digit;
 160:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	83 ed       	ldi	r24, 0xD3	; 211
 164:	90 e3       	ldi	r25, 0x30	; 48
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <showOn7SEG+0x42>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <showOn7SEG+0x48>
 16c:	00 00       	nop
	_delay_ms(50);
	PORTA |= (1 << PA7);
 16e:	df 9a       	sbi	0x1b, 7	; 27
	PORTA &= ~(1 << PA6);
 170:	de 98       	cbi	0x1b, 6	; 27
	PORTB = second_digit;
 172:	68 bb       	out	0x18, r22	; 24
 174:	08 95       	ret

00000176 <main>:

}
int main(void)
{
	
	start_INT1();
 176:	0e 94 50 00 	call	0xa0	; 0xa0 <start_INT1>
	start_ADC();
 17a:	0e 94 62 00 	call	0xc4	; 0xc4 <start_ADC>
	start_UART();
 17e:	0e 94 7c 00 	call	0xf8	; 0xf8 <start_UART>
    while (1) 
    {
		convert();
		processed_send = (adcVal / 10) - 24;
 182:	ca e0       	ldi	r28, 0x0A	; 10
 184:	d0 e0       	ldi	r29, 0x00	; 0
	start_INT1();
	start_ADC();
	start_UART();
    while (1) 
    {
		convert();
 186:	0e 94 68 00 	call	0xd0	; 0xd0 <convert>
		processed_send = (adcVal / 10) - 24;
 18a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <adcVal>
 18e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <adcVal+0x1>
 192:	be 01       	movw	r22, r28
 194:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__divmodhi4>
 198:	68 51       	subi	r22, 0x18	; 24
 19a:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <_edata>
		send();
 19e:	0e 94 86 00 	call	0x10c	; 0x10c <send>
		receive();
 1a2:	0e 94 8c 00 	call	0x118	; 0x118 <receive>
		if (processed_receive >= 50) PORTC |= (1 << PC0);
 1a6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <processed_receive>
 1aa:	82 33       	cpi	r24, 0x32	; 50
 1ac:	14 f0       	brlt	.+4      	; 0x1b2 <main+0x3c>
 1ae:	a8 9a       	sbi	0x15, 0	; 21
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <main+0x46>
		else if (processed_receive < 50) PORTC &= ~(1 << PC0);
 1b2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <processed_receive>
 1b6:	82 33       	cpi	r24, 0x32	; 50
 1b8:	0c f4       	brge	.+2      	; 0x1bc <main+0x46>
 1ba:	a8 98       	cbi	0x15, 0	; 21
		if (processed_receive < 0)
 1bc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <processed_receive>
 1c0:	88 23       	and	r24, r24
 1c2:	14 f4       	brge	.+4      	; 0x1c8 <main+0x52>
		{
			processed_receive = 0;
 1c4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <processed_receive>
		}
		showOn7SEG();
 1c8:	0e 94 92 00 	call	0x124	; 0x124 <showOn7SEG>
		
    }
 1cc:	dc cf       	rjmp	.-72     	; 0x186 <main+0x10>

000001ce <__divmodhi4>:
 1ce:	97 fb       	bst	r25, 7
 1d0:	07 2e       	mov	r0, r23
 1d2:	16 f4       	brtc	.+4      	; 0x1d8 <__divmodhi4+0xa>
 1d4:	00 94       	com	r0
 1d6:	07 d0       	rcall	.+14     	; 0x1e6 <__divmodhi4_neg1>
 1d8:	77 fd       	sbrc	r23, 7
 1da:	09 d0       	rcall	.+18     	; 0x1ee <__divmodhi4_neg2>
 1dc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__udivmodhi4>
 1e0:	07 fc       	sbrc	r0, 7
 1e2:	05 d0       	rcall	.+10     	; 0x1ee <__divmodhi4_neg2>
 1e4:	3e f4       	brtc	.+14     	; 0x1f4 <__divmodhi4_exit>

000001e6 <__divmodhi4_neg1>:
 1e6:	90 95       	com	r25
 1e8:	81 95       	neg	r24
 1ea:	9f 4f       	sbci	r25, 0xFF	; 255
 1ec:	08 95       	ret

000001ee <__divmodhi4_neg2>:
 1ee:	70 95       	com	r23
 1f0:	61 95       	neg	r22
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255

000001f4 <__divmodhi4_exit>:
 1f4:	08 95       	ret

000001f6 <__udivmodhi4>:
 1f6:	aa 1b       	sub	r26, r26
 1f8:	bb 1b       	sub	r27, r27
 1fa:	51 e1       	ldi	r21, 0x11	; 17
 1fc:	07 c0       	rjmp	.+14     	; 0x20c <__udivmodhi4_ep>

000001fe <__udivmodhi4_loop>:
 1fe:	aa 1f       	adc	r26, r26
 200:	bb 1f       	adc	r27, r27
 202:	a6 17       	cp	r26, r22
 204:	b7 07       	cpc	r27, r23
 206:	10 f0       	brcs	.+4      	; 0x20c <__udivmodhi4_ep>
 208:	a6 1b       	sub	r26, r22
 20a:	b7 0b       	sbc	r27, r23

0000020c <__udivmodhi4_ep>:
 20c:	88 1f       	adc	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	5a 95       	dec	r21
 212:	a9 f7       	brne	.-22     	; 0x1fe <__udivmodhi4_loop>
 214:	80 95       	com	r24
 216:	90 95       	com	r25
 218:	bc 01       	movw	r22, r24
 21a:	cd 01       	movw	r24, r26
 21c:	08 95       	ret

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
